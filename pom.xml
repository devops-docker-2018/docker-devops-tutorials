<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.3.RELEASE</version>
    </parent>

    <groupId>com.devops.docker</groupId>
    <artifactId>docker-devops-tutorials</artifactId>
    <version>3.0.0-SNAPSHOT</version>

    <properties>
        <docker-maven-plugin.version>0.4.13</docker-maven-plugin.version>

 <!--       <docker.dev.image.prefix>192.168.0.152:8081/tax</docker.dev.image.prefix>
        <docker.dev.Host>http://192.168.0.152:2375</docker.dev.Host>-->
        <docker.dev.image.prefix>47.94.230.242:8081/tax</docker.dev.image.prefix>
        <docker.dev.Host>http://47.94.230.242:2375</docker.dev.Host>
        <docker.repository>47.94.230.242:8081</docker.repository>
        <docker.registry.name>tax</docker.registry.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <profiles>
        <profile>
            <id>dev</id>

           <!-- <build>
                <resources>&lt;!&ndash; 使用@@站位符，输出Dockerfile至docker文件夹 &ndash;&gt;
                    <resource>
                        <directory>src/main/java/docker</directory>
                        <filtering>true</filtering>
                        <includes>
                            <include>**/Dockerfile</include>
                        </includes>
                        <targetPath>src/main/java/docker</targetPath>
                    </resource>
                </resources>
                <plugins>
               &lt;!&ndash;     <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${docker-maven-plugin.version}</version>
                        <configuration>
                            <dockerHost>${docker.dev.Host}</dockerHost>
                            <imageName>${docker.dev.image.prefix}/${project.artifactId}</imageName>
                            <baseImage>java:8</baseImage>
                            <imageTags>
                                <imageTag>${project.version}</imageTag>
                            </imageTags>
                            <entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>
                            <resources>
                                <resource>
                                    <targetPath>/</targetPath>
                                    <directory>${project.build.directory}</directory>
                                    <include>${project.build.finalName}.jar</include>
                                </resource>
                            </resources>
                        </configuration>
                    </plugin>&ndash;&gt;
                    &lt;!&ndash;基于Dockerfile的镜像build、push插件&ndash;&gt;
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>${docker-maven-plugin.version}</version>
                        <configuration>
                            <dockerHost>${docker.dev.Host}</dockerHost>
                            <imageName>${docker.dev.image.prefix}/${project.artifactId}</imageName>
                            <imageTags>
                                <imageTag>${project.version}</imageTag>
                            </imageTags>
                            <dockerDirectory>${project.basedir}/docker</dockerDirectory>
                            <resources>
                                <resource>
                                    <targetPath>/</targetPath>
                                    <directory>${project.build.directory}</directory>
                                    <include>${project.build.finalName}.${project.packaging}</include>
                                </resource>
                            </resources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>-->
            <build>
                <resources>
                    <resource>
                        <directory>src/main/docker</directory>
                        <filtering>true</filtering>
                        <includes>
                            <include>**/Dockerfile</include>
                        </includes>
                        <targetPath>../docker</targetPath>
                    </resource>
                </resources>
                <plugins>
                    <plugin><!-- 置顶 -->
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.4.13</version>
                        <executions>

                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>

                            <execution>
                                <id>tag-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>tag</goal>
                                </goals>
                                <configuration>
                                    <image>${docker.registry.name}/${project.artifactId}:${project.version}</image>
                                    <newName>${docker.repository}/${docker.registry.name}/${project.artifactId}:${project.version}</newName>
                                </configuration>
                            </execution>

                            <execution>
                                <id>push-image</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <configuration>
                                    <imageName>${docker.repository}/${docker.registry.name}/${project.artifactId}:${project.version}</imageName>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <dockerHost>${docker.dev.Host}</dockerHost>
                            <pushImage>true</pushImage>
                            <dockerDirectory>target/docker</dockerDirectory>
                            <imageName>
                                ${docker.repository}/${docker.registry.name}/${project.artifactId}:${project.version}
                            </imageName>
                            <imageTags>
                                <imageTag>${project.version}</imageTag>
                                <imageTag>latest</imageTag>
                            </imageTags>
                            <resources>
                                <rescource>
                                    <targetPath>/</targetPath>
                                    <directory>${project.build.directory}</directory>
                                    <include>${project.build.finalName}.jar</include>
                                </rescource>
                            </resources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>